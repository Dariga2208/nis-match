from aiogram import Router, F
from aiogram.types import Message, ContentType, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from keyboards.buttons import (
    fill_form_button, after_fill_keyboard,
    skip_button, edit_options_keyboard, reaction_keyboard, view_profiles_button
)
from utils.profile import show_profile
from database import user_data
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hlink

router = Router()

# –≠—Ç–∞–ø—ã –∞–Ω–∫–µ—Ç—ã
class Form(StatesGroup):
    name = State()
    age = State()
    grade = State()
    photo = State()
    about = State()

class EditForm(StatesGroup):
    name = State()
    age = State()
    grade = State()
    photo = State()
    about = State()

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–Ω–∫–µ—Ç
viewing_progress = {}

@router.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    profile = user_data.get(user_id)

    if profile:
        await show_profile(message, profile)
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É:", reply_markup=after_fill_keyboard)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É:", reply_markup=fill_form_button)

@router.message(F.text == "üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def ask_name(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –≤–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.name)

@router.message(Form.name)
async def ask_age(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    await state.set_state(Form.age)

@router.message(Form.age)
async def ask_grade(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("–í –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ?")
    await state.set_state(Form.grade)

@router.message(Form.grade)
async def ask_photo(message: Message, state: FSMContext):
    await state.update_data(grade=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
    await state.set_state(Form.photo)

@router.message(Form.photo, F.photo)
async def ask_about(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ. –ú–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –ø–∏—Å–∞—Ç—å.", reply_markup=skip_button)
    await state.set_state(Form.about)

@router.message(Form.about, F.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_about(message: Message, state: FSMContext):
    await state.update_data(about="")
    await finish_form(message, state)

@router.message(Form.about)
async def finish(message: Message, state: FSMContext):
    await state.update_data(about=message.text)
    await finish_form(message, state)

async def finish_form(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    user_data[user_id] = {
        "user_id": user_id,  # üëà –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º!
        "name": data["name"],
        "age": data["age"],
        "grade": data["grade"],
        "photo": data["photo"] if data.get("photo") else None,  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ç–æ
        "about": data.get("about", ""),
    }
    await show_profile(message, data)
    await message.answer("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=after_fill_keyboard)
    await state.clear()

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É
@router.message(F.text == "‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def stop_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in user_data:
        del user_data[user_id]
    await state.clear()
    await message.answer("–ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=fill_form_button)

# –ö–Ω–æ–ø–∫–∞ –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É
@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def edit_profile_menu(message: Message):
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=edit_options_keyboard)

@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
async def edit_name(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(EditForm.name)

@router.message(EditForm.name)
async def save_new_name(message: Message, state: FSMContext):
    user_data[message.from_user.id]["name"] = message.text
    await show_profile(message, user_data[message.from_user.id])
    await message.answer("–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=after_fill_keyboard)
    await state.clear()

@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç")
async def edit_age(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(EditForm.age)

@router.message(EditForm.age)
async def save_new_age(message: Message, state: FSMContext):
    user_data[message.from_user.id]["age"] = message.text
    await show_profile(message, user_data[message.from_user.id])
    await message.answer("–í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=after_fill_keyboard)
    await state.clear()

@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å")
async def edit_grade(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å:")
    await state.set_state(EditForm.grade)

@router.message(EditForm.grade)
async def save_new_grade(message: Message, state: FSMContext):
    user_data[message.from_user.id]["grade"] = message.text
    await show_profile(message, user_data[message.from_user.id])
    await message.answer("–ö–ª–∞—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=after_fill_keyboard)
    await state.clear()

@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ")
async def edit_photo(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
    await state.set_state(EditForm.photo)

@router.message(EditForm.photo, F.photo)
async def save_new_photo(message: Message, state: FSMContext):
    user_data[message.from_user.id]["photo"] = message.photo[-1].file_id
    await show_profile(message, user_data[message.from_user.id])
    await message.answer("–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=after_fill_keyboard)
    await state.clear()

@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
async def edit_about(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ —Å–µ–±–µ:")
    await state.set_state(EditForm.about)

@router.message(EditForm.about)
async def save_new_about(message: Message, state: FSMContext):
    user_data[message.from_user.id]["about"] = message.text
    await show_profile(message, user_data[message.from_user.id])
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=after_fill_keyboard)
    await state.clear()

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç
@router.message(F.text == "üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def view_profiles(message: Message):
    user_id = message.from_user.id
    candidates = [uid for uid in user_data if uid != user_id]

    if not candidates:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        return

    viewing_progress[user_id] = {"candidates": candidates, "index": 0}
    await show_next_candidate(message, user_id)

async def show_next_candidate(message: Message, viewer_id: int):
    progress = viewing_progress.get(viewer_id)
    if not progress or progress["index"] >= len(progress["candidates"]):
        await message.answer("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
        viewing_progress.pop(viewer_id, None)
        return

    candidate_id = progress["candidates"][progress["index"]]
    profile = user_data.get(candidate_id)

    if not profile or not profile.get('photo'):
        await message.answer("–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ.")
        return

    caption = f"{profile['name']}, {profile['age']}, {profile['grade']} –∫–ª–∞—Å—Å\n\n{profile['about']}"
    await message.answer_photo(photo=profile['photo'], caption=caption, reply_markup=reaction_keyboard)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
    progress["current"] = candidate_id

@router.callback_query(F.data == "like")
async def handle_like(callback: CallbackQuery):
    liker_id = callback.from_user.id
    progress = viewing_progress.get(liker_id)

    if not progress:
        await callback.answer("–ù–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ª–∞–π–∫–∞.")
        return

    liked_id = progress["current"]
    if liked_id in user_data:
        liker_profile = user_data[liker_id]
        caption = f"{liker_profile['name']}, {liker_profile['age']}, {liker_profile['grade']} –∫–ª–∞—Å—Å\n\n{liker_profile['about']}"
        link = hlink("–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", f"tg://user?id={liker_id}")

        await callback.bot.send_photo(
            chat_id=liked_id,
            photo=liker_profile['photo'],
            caption=f"‚ù§Ô∏è –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å!\n\n{caption}\n\n{link}"
        )

    progress["index"] += 1
    await show_next_candidate(callback.message, liker_id)

@router.callback_query(F.data == "dislike")
async def handle_dislike(callback: CallbackQuery):
    user_id = callback.from_user.id
    progress = viewing_progress.get(user_id)
    if progress:
        progress["index"] += 1
        await show_next_candidate(callback.message, user_id)
